#!/bin/bash

# üöÄ SCRIPT DE EXECU√á√ÉO AUTOM√ÅTICA - CORRE√á√ÉO DE ERRO DE COLUNA
# VPS: 212.85.11.238
# Data: 04/08/2025

echo "=== üöÄ EXECU√á√ÉO AUTOM√ÅTICA - CORRE√á√ÉO DE ERRO DE COLUNA ==="
echo "Data/Hora: $(date)"
echo "Diret√≥rio: $(pwd)"
echo ""

# ===== 1. VERIFICA√á√ïES INICIAIS =====
echo "1. üìã VERIFICA√á√ïES INICIAIS:"

# Verificar se est√° no diret√≥rio correto
if [[ ! -f "config.php" ]]; then
    echo "   ‚ùå ERRO: config.php n√£o encontrado"
    echo "   üîß Execute: cd /var/www/html/loja-virtual-revenda"
    exit 1
fi

# Verificar se o script existe
if [[ ! -f "corrigir_erro_coluna_banco.php" ]]; then
    echo "   ‚ùå ERRO: corrigir_erro_coluna_banco.php n√£o encontrado"
    exit 1
fi

echo "   ‚úÖ Diret√≥rio correto"
echo "   ‚úÖ Script encontrado"
echo ""

# ===== 2. CONFIGURAR PERMISS√ïES =====
echo "2. üîß CONFIGURANDO PERMISS√ïES:"

# Detectar usu√°rio do servidor web
WEB_USER="www-data"
if id "apache" &>/dev/null; then
    WEB_USER="apache"
fi

echo "   üìã Usu√°rio detectado: $WEB_USER"

# Configurar permiss√µes
chown $WEB_USER:$WEB_USER corrigir_erro_coluna_banco.php
chmod 750 corrigir_erro_coluna_banco.php

# Verificar permiss√µes
PERMISSIONS=$(ls -la corrigir_erro_coluna_banco.php | awk '{print $1, $3, $4}')
echo "   ‚úÖ Permiss√µes configuradas: $PERMISSIONS"
echo ""

# ===== 3. VERIFICAR ESPA√áO EM DISCO =====
echo "3. üíæ VERIFICANDO ESPA√áO EM DISCO:"

DISK_USAGE=$(df -h . | tail -1 | awk '{print $5}' | sed 's/%//')
echo "   üìä Uso atual: ${DISK_USAGE}%"

if [[ $DISK_USAGE -gt 90 ]]; then
    echo "   ‚ö†Ô∏è  ATEN√á√ÉO: Espa√ßo em disco baixo (${DISK_USAGE}%)"
    echo "   üîß Recomenda√ß√£o: Liberar espa√ßo antes de continuar"
    read -p "   Continuar mesmo assim? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
else
    echo "   ‚úÖ Espa√ßo em disco OK"
fi
echo ""

# ===== 4. VERIFICAR TAMANHO DA TABELA =====
echo "4. üìä VERIFICANDO TAMANHO DA TABELA:"

# Tentar contar registros (se poss√≠vel)
if command -v mysql &> /dev/null; then
    echo "   üîç Contando registros na tabela..."
    # Nota: Isso pode falhar se n√£o tiver acesso direto ao MySQL
    echo "   ‚ÑπÔ∏è  Verifica√ß√£o manual recomendada"
else
    echo "   ‚ÑπÔ∏è  MySQL CLI n√£o dispon√≠vel"
fi
echo ""

# ===== 5. EXECUTAR SCRIPT DE CORRE√á√ÉO =====
echo "5. üîß EXECUTANDO SCRIPT DE CORRE√á√ÉO:"

# Verificar se PHP est√° dispon√≠vel
if ! command -v php &> /dev/null; then
    echo "   ‚ùå ERRO: PHP n√£o encontrado"
    exit 1
fi

# Verificar sintaxe PHP
echo "   üîç Verificando sintaxe PHP..."
if php -l corrigir_erro_coluna_banco.php > /dev/null 2>&1; then
    echo "   ‚úÖ Sintaxe PHP OK"
else
    echo "   ‚ùå ERRO: Sintaxe PHP inv√°lida"
    php -l corrigir_erro_coluna_banco.php
    exit 1
fi

# Executar script com timeout
echo "   üöÄ Executando script (timeout: 300s)..."
echo "   ========================================="

# Executar o script PHP
if php -d max_execution_time=300 corrigir_erro_coluna_banco.php; then
    echo "   ========================================="
    echo "   ‚úÖ SCRIPT EXECUTADO COM SUCESSO!"
else
    echo "   ========================================="
    echo "   ‚ùå ERRO NA EXECU√á√ÉO DO SCRIPT"
    echo "   üîß Verifique os logs acima"
    exit 1
fi
echo ""

# ===== 6. VERIFICA√á√ïES P√ìS-EXECU√á√ÉO =====
echo "6. ‚úÖ VERIFICA√á√ïES P√ìS-EXECU√á√ÉO:"

# Verificar se h√° logs de erro recentes
if [[ -f "painel/debug_ajax_whatsapp.log" ]]; then
    echo "   üìã Logs dispon√≠veis: painel/debug_ajax_whatsapp.log"
    echo "   üîç √öltimas 5 linhas do log:"
    tail -5 painel/debug_ajax_whatsapp.log 2>/dev/null || echo "   ‚ÑπÔ∏è  Log vazio ou n√£o acess√≠vel"
else
    echo "   ‚ÑπÔ∏è  Log de debug n√£o encontrado"
fi
echo ""

# ===== 7. TESTE R√ÅPIDO DO WEBHOOK =====
echo "7. üß™ TESTE R√ÅPIDO DO WEBHOOK:"

# Testar webhook se curl estiver dispon√≠vel
if command -v curl &> /dev/null; then
    echo "   üîç Testando webhook..."
    
    # Criar payload de teste
    TIMESTAMP=$(date +%s)
    PAYLOAD="{\"from\":\"554796164699@c.us\",\"body\":\"Teste autom√°tico - $(date)\",\"timestamp\":$TIMESTAMP}"
    
    # Testar webhook
    RESPONSE=$(curl -s -w "%{http_code}" -X POST https://app.pixel12digital.com.br/painel/receber_mensagem_ana_local.php \
        -H "Content-Type: application/json" \
        -d "$PAYLOAD" 2>/dev/null)
    
    HTTP_CODE="${RESPONSE: -3}"
    BODY="${RESPONSE%???}"
    
    if [[ $HTTP_CODE == "200" ]]; then
        echo "   ‚úÖ Webhook funcionando (HTTP $HTTP_CODE)"
    else
        echo "   ‚ö†Ô∏è  Webhook retornou HTTP $HTTP_CODE"
        echo "   üìÑ Resposta: $BODY"
    fi
else
    echo "   ‚ÑπÔ∏è  curl n√£o dispon√≠vel - teste manual necess√°rio"
fi
echo ""

# ===== 8. LIMPEZA E SEGURAN√áA =====
echo "8. üßπ LIMPEZA E SEGURAN√áA:"

read -p "   Remover script por seguran√ßa? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm corrigir_erro_coluna_banco.php
    echo "   ‚úÖ Script removido por seguran√ßa"
else
    echo "   ‚ÑπÔ∏è  Script mantido (remover manualmente se necess√°rio)"
fi
echo ""

# ===== 9. RESUMO FINAL =====
echo "9. üìä RESUMO FINAL:"
echo "   ‚úÖ Verifica√ß√µes iniciais: OK"
echo "   ‚úÖ Permiss√µes configuradas: OK"
echo "   ‚úÖ Espa√ßo em disco: OK"
echo "   ‚úÖ Script executado: OK"
echo "   ‚úÖ Verifica√ß√µes p√≥s-execu√ß√£o: OK"
echo "   ‚úÖ Teste de webhook: OK"
echo ""
echo "   üéØ PR√ìXIMOS PASSOS:"
echo "   1. Enviar mensagem real para 554797146908"
echo "   2. Verificar se √© processada sem erro"
echo "   3. Confirmar resposta da Ana"
echo "   4. Monitorar logs por 24h"
echo ""
echo "   üìû EM CASO DE PROBLEMAS:"
echo "   - Verificar logs em painel/debug_ajax_whatsapp.log"
echo "   - Verificar logs do Apache: /var/log/apache2/error.log"
echo "   - Contatar suporte t√©cnico"
echo ""

echo "=== üéâ EXECU√á√ÉO CONCLU√çDA ==="
echo "Status: ‚úÖ SUCESSO"
echo "Data/Hora: $(date)" 