<?php
/**
 * üéØ USAR VPS 3001 FUNCIONANDO
 * 
 * Script para ajustar o c√≥digo local para usar a VPS 3001
 * que est√° funcionando perfeitamente como VPS principal
 */

echo "üéØ USANDO VPS 3001 FUNCIONANDO\n";
echo "=============================\n\n";

require_once 'config.php';

$vps_ip = '212.85.11.238';

// ===== 1. VERIFICAR VPS 3001 =====
echo "1Ô∏è‚É£ VERIFICANDO VPS 3001\n";
echo "------------------------\n";

$ch = curl_init("http://$vps_ip:3001/status");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 10);
$response_3001 = curl_exec($ch);
$http_code_3001 = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($http_code_3001 === 200) {
    $status_3001 = json_decode($response_3001, true);
    echo "‚úÖ VPS 3001 est√° funcionando perfeitamente!\n";
    echo "üìä Ready: " . ($status_3001['ready'] ? 'true' : 'false') . "\n";
    echo "üì± Porta: " . ($status_3001['port'] ?? '3001') . "\n";
    echo "üïí √öltima sess√£o: " . ($status_3001['lastSession'] ?? 'N/A') . "\n";
    
    if (isset($status_3001['clients_status'])) {
        foreach ($status_3001['clients_status'] as $session => $status) {
            echo "üîç Sess√£o $session: " . ($status['ready'] ? 'ready' : 'not ready') . "\n";
        }
    }
} else {
    echo "‚ùå VPS 3001 n√£o est√° respondendo\n";
    exit(1);
}

echo "\n";

// ===== 2. TESTAR ENDPOINTS DA VPS 3001 =====
echo "2Ô∏è‚É£ TESTANDO ENDPOINTS DA VPS 3001\n";
echo "----------------------------------\n";

$endpoints_teste = [
    '/status' => 'Status geral',
    '/qr' => 'QR Code',
    '/session/start/default' => 'Iniciar sess√£o default',
    '/session/start/comercial' => 'Iniciar sess√£o comercial'
];

$endpoints_funcionais = [];

foreach ($endpoints_teste as $endpoint => $descricao) {
    $method = (strpos($endpoint, '/session/start/') !== false) ? 'POST' : 'GET';
    
    $ch = curl_init("http://$vps_ip:3001$endpoint");
    if ($method === 'POST') {
        curl_setopt($ch, CURLOPT_POST, true);
    }
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);
    
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    $status = ($http_code === 200) ? "‚úÖ" : "‚ùå";
    echo "üîç $descricao: $status (HTTP $http_code)\n";
    
    if ($http_code === 200) {
        $endpoints_funcionais[$endpoint] = true;
    }
}

echo "\n";

// ===== 3. CRIAR CONFIGURA√á√ÉO OTIMIZADA =====
echo "3Ô∏è‚É£ CRIANDO CONFIGURA√á√ÉO OTIMIZADA\n";
echo "----------------------------------\n";

$config_otimizada = "<?php
/**
 * CONFIGURA√á√ÉO OTIMIZADA - VPS 3001 FUNCIONANDO
 * Gerado automaticamente em " . date('Y-m-d H:i:s') . "
 * 
 * Esta configura√ß√£o usa a VPS 3001 como principal, que est√° funcionando perfeitamente
 */

// VPS Principal (funcionando)
define('VPS_PRINCIPAL_URL', 'http://$vps_ip:3001');
define('VPS_PRINCIPAL_READY', true);
define('VPS_PRINCIPAL_PORT', '3001');

// VPS Secund√°ria (com problemas)
define('VPS_SECUNDARIA_URL', 'http://$vps_ip:3000');
define('VPS_SECUNDARIA_READY', false);
define('VPS_SECUNDARIA_PORT', '3000');

// Endpoints funcionais na VPS 3001
\$ENDPOINTS_VPS_3001 = " . json_encode($endpoints_funcionais, JSON_PRETTY_PRINT) . ";

// Fun√ß√£o para obter URL da VPS principal
function getVpsPrincipal() {
    return VPS_PRINCIPAL_URL;
}

// Fun√ß√£o para obter URL da VPS secund√°ria (fallback)
function getVpsSecundaria() {
    return VPS_SECUNDARIA_URL;
}

// Fun√ß√£o para verificar se endpoint funciona na VPS principal
function endpointFuncionaVps3001(\$endpoint) {
    global \$ENDPOINTS_VPS_3001;
    return isset(\$ENDPOINTS_VPS_3001[\$endpoint]) && \$ENDPOINTS_VPS_3001[\$endpoint];
}

// Fun√ß√£o para obter URL baseada na porta (com fallback)
function getVpsUrl(\$porta) {
    if (\$porta == '3001' || \$porta == 3001) {
        return VPS_PRINCIPAL_URL;
    } elseif (\$porta == '3000' || \$porta == 3000) {
        // Se VPS 3000 n√£o estiver funcionando, usar 3001
        return VPS_PRINCIPAL_URL;
    }
    return VPS_PRINCIPAL_URL; // Padr√£o para VPS principal
}

// Fun√ß√£o para obter VPS de fallback
function getVpsFallback() {
    return VPS_PRINCIPAL_URL;
}

// Configura√ß√µes espec√≠ficas para o sistema
define('WHATSAPP_ROBOT_URL', VPS_PRINCIPAL_URL);
define('WHATSAPP_TIMEOUT', 10);

// Status das VPS
define('VPS_3000_FUNCIONANDO', false);
define('VPS_3001_FUNCIONANDO', true);
define('VPS_3000_READY', false);
define('VPS_3001_READY', true);
?>";

file_put_contents('config_vps_3001_principal.php', $config_otimizada);
echo "‚úÖ Arquivo config_vps_3001_principal.php criado\n";

// ===== 4. CRIAR SCRIPT DE TESTE OTIMIZADO =====
echo "\n4Ô∏è‚É£ CRIANDO SCRIPT DE TESTE OTIMIZADO\n";
echo "-------------------------------------\n";

$teste_otimizado = "<?php
/**
 * TESTE OTIMIZADO - VPS 3001 PRINCIPAL
 * Testa a VPS 3001 que est√° funcionando perfeitamente
 */

require_once 'config_vps_3001_principal.php';

echo \"üéØ TESTE VPS 3001 PRINCIPAL\\n\";
echo \"============================\\n\\n\";

echo \"üìä CONFIGURA√á√ÉO ATUAL:\\n\";
echo \"‚Ä¢ VPS Principal: \" . VPS_PRINCIPAL_URL . \"\\n\";
echo \"‚Ä¢ VPS Principal Ready: \" . (VPS_PRINCIPAL_READY ? 'true' : 'false') . \"\\n\";
echo \"‚Ä¢ VPS Secund√°ria: \" . VPS_SECUNDARIA_URL . \"\\n\";
echo \"‚Ä¢ VPS Secund√°ria Ready: \" . (VPS_SECUNDARIA_READY ? 'true' : 'false') . \"\\n\\n\";

// Testar VPS Principal
echo \"üîç Testando VPS Principal (3001)...\\n\";
\$ch = curl_init(VPS_PRINCIPAL_URL . '/status');
curl_setopt(\$ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt(\$ch, CURLOPT_TIMEOUT, 10);
\$response = curl_exec(\$ch);
\$http_code = curl_getinfo(\$ch, CURLINFO_HTTP_CODE);
curl_close(\$ch);

if (\$http_code === 200) {
    \$status = json_decode(\$response, true);
    echo \"  ‚úÖ VPS Principal funcionando\\n\";
    echo \"  üìä Ready: \" . (\$status['ready'] ? 'true' : 'false') . \"\\n\";
    echo \"  üì± Porta: \" . (\$status['port'] ?? 'N/A') . \"\\n\";
    
    // Testar endpoints funcionais
    echo \"  üìã Endpoints funcionais:\\n\";
    foreach (\$ENDPOINTS_VPS_3001 as \$endpoint => \$funciona) {
        if (\$funciona) {
            echo \"    ‚úÖ \$endpoint\\n\";
        }
    }
} else {
    echo \"  ‚ùå VPS Principal n√£o est√° funcionando\\n\";
}

echo \"\\n‚úÖ Teste conclu√≠do!\\n\";
echo \"üí° Use a VPS 3001 como principal no seu c√≥digo\\n\";
?>";

file_put_contents('teste_vps_3001_principal.php', $teste_otimizado);
echo "‚úÖ Arquivo teste_vps_3001_principal.php criado\n";

// ===== 5. CRIAR EXEMPLO DE USO =====
echo "\n5Ô∏è‚É£ CRIANDO EXEMPLO DE USO\n";
echo "---------------------------\n";

$exemplo_uso = "<?php
/**
 * EXEMPLO DE USO - VPS 3001 PRINCIPAL
 * Como usar a VPS 3001 que est√° funcionando perfeitamente
 */

require_once 'config_vps_3001_principal.php';

echo \"üìù EXEMPLO DE USO - VPS 3001 PRINCIPAL\\n\";
echo \"=====================================\\n\\n\";

// Exemplo 1: Obter URL da VPS
echo \"1Ô∏è‚É£ OBTENDO URL DA VPS\\n\";
echo \"URL Principal: \" . getVpsPrincipal() . \"\\n\";
echo \"URL para porta 3000: \" . getVpsUrl('3000') . \"\\n\";
echo \"URL para porta 3001: \" . getVpsUrl('3001') . \"\\n\\n\";

// Exemplo 2: Verificar endpoints
echo \"2Ô∏è‚É£ VERIFICANDO ENDPOINTS\\n\";
\$endpoints = ['/status', '/qr', '/session/start/default'];
foreach (\$endpoints as \$endpoint) {
    \$funciona = endpointFuncionaVps3001(\$endpoint);
    echo \"Endpoint \$endpoint: \" . (\$funciona ? '‚úÖ' : '‚ùå') . \"\\n\";
}

echo \"\\n\";

// Exemplo 3: Fazer requisi√ß√£o
echo \"3Ô∏è‚É£ FAZENDO REQUISI√á√ÉO\\n\";
\$ch = curl_init(getVpsPrincipal() . '/status');
curl_setopt(\$ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt(\$ch, CURLOPT_TIMEOUT, 10);
\$response = curl_exec(\$ch);
\$http_code = curl_getinfo(\$ch, CURLINFO_HTTP_CODE);
curl_close(\$ch);

if (\$http_code === 200) {
    \$status = json_decode(\$response, true);
    echo \"‚úÖ Requisi√ß√£o bem-sucedida\\n\";
    echo \"üìä Status: \" . (\$status['status'] ?? 'unknown') . \"\\n\";
    echo \"üì± Ready: \" . (\$status['ready'] ? 'true' : 'false') . \"\\n\";
} else {
    echo \"‚ùå Erro na requisi√ß√£o (HTTP \$http_code)\\n\";
}

echo \"\\n‚úÖ Exemplo conclu√≠do!\\n\";
?>";

file_put_contents('exemplo_uso_vps_3001.php', $exemplo_uso);
echo "‚úÖ Arquivo exemplo_uso_vps_3001.php criado\n";

// ===== 6. RESUMO FINAL =====
echo "\n6Ô∏è‚É£ RESUMO FINAL\n";
echo "----------------\n";

echo "üéØ SOLU√á√ÉO IMPLEMENTADA:\n";
echo "‚úÖ VPS 3001 est√° funcionando perfeitamente\n";
echo "‚úÖ Configura√ß√£o otimizada criada\n";
echo "‚úÖ Sistema de fallback implementado\n";
echo "‚úÖ Exemplos de uso fornecidos\n\n";

echo "üìÅ ARQUIVOS CRIADOS:\n";
echo "‚Ä¢ config_vps_3001_principal.php - Configura√ß√£o otimizada\n";
echo "‚Ä¢ teste_vps_3001_principal.php - Teste da VPS principal\n";
echo "‚Ä¢ exemplo_uso_vps_3001.php - Exemplo de uso\n\n";

echo "üí° COMO USAR NO SEU C√ìDIGO:\n";
echo "1. Inclua: require_once 'config_vps_3001_principal.php';\n";
echo "2. Use: getVpsPrincipal() para obter a URL da VPS\n";
echo "3. Use: getVpsUrl(\$porta) para obter URL baseada na porta\n";
echo "4. Use: endpointFuncionaVps3001(\$endpoint) para verificar endpoints\n\n";

echo "üöÄ PR√ìXIMOS PASSOS:\n";
echo "1. Teste a configura√ß√£o: php teste_vps_3001_principal.php\n";
echo "2. Veja o exemplo: php exemplo_uso_vps_3001.php\n";
echo "3. Integre no seu c√≥digo usando a configura√ß√£o otimizada\n";
echo "4. Enquanto isso, continue corrigindo a VPS 3000 se necess√°rio\n\n";

echo "‚úÖ Configura√ß√£o otimizada conclu√≠da!\n";
echo "üéâ Seu sistema agora usa a VPS 3001 que est√° funcionando perfeitamente!\n";
?> 