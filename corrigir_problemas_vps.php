<?php
/**
 * üîß CORRIGIR PROBLEMAS IDENTIFICADOS NA VPS
 * 
 * Script para identificar e corrigir problemas espec√≠ficos:
 * 1. API diferente nos canais
 * 2. Webhooks n√£o configurados
 * 3. Sess√µes n√£o conectadas
 * 4. Endpoints n√£o funcionando
 */

echo "üîß CORRIGINDO PROBLEMAS IDENTIFICADOS NA VPS\n";
echo "============================================\n\n";

require_once 'config.php';

$vps_ip = '212.85.11.238';
$webhook_principal = 'https://app.pixel12digital.com.br/painel/receber_mensagem_ana_local.php';

// ===== 1. DIAGN√ìSTICO DETALHADO DOS PROBLEMAS =====
echo "1Ô∏è‚É£ DIAGN√ìSTICO DETALHADO DOS PROBLEMAS\n";
echo "--------------------------------------\n";

$problemas = [];

// Verificar canal 3000
echo "üîç Analisando Canal 3000...\n";
$ch = curl_init("http://$vps_ip:3000/status");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 10);
$response_3000 = curl_exec($ch);
$http_code_3000 = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($http_code_3000 === 200) {
    $status_3000 = json_decode($response_3000, true);
    echo "  ‚úÖ Status: " . ($status_3000['status'] ?? 'unknown') . "\n";
    
    // Verificar sess√µes
    if (isset($status_3000['clients_status'])) {
        $sessoes = $status_3000['clients_status'];
        echo "  üë• Sess√µes: " . count($sessoes) . "\n";
        foreach ($sessoes as $sessao => $status) {
            echo "    - $sessao: " . ($status['status'] ?? 'unknown') . "\n";
        }
    } else {
        echo "  ‚ö†Ô∏è Nenhuma sess√£o encontrada\n";
        $problemas[] = "Canal 3000: Sem sess√µes conectadas";
    }
} else {
    echo "  ‚ùå Canal 3000 n√£o responde (HTTP $http_code_3000)\n";
    $problemas[] = "Canal 3000: N√£o responde";
}

// Verificar canal 3001
echo "\nüîç Analisando Canal 3001...\n";
$ch = curl_init("http://$vps_ip:3001/status");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 10);
$response_3001 = curl_exec($ch);
$http_code_3001 = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($http_code_3001 === 200) {
    $status_3001 = json_decode($response_3001, true);
    echo "  ‚úÖ Status: " . ($status_3001['status'] ?? 'unknown') . "\n";
    
    // Verificar se √© API diferente
    if (isset($status_3001['clients_status'])) {
        echo "  üë• Sess√µes: " . count($status_3001['clients_status']) . "\n";
    } else {
        echo "  ‚ö†Ô∏è API diferente detectada\n";
        $problemas[] = "Canal 3001: API diferente (n√£o usa whatsapp-api-server.js)";
    }
} else {
    echo "  ‚ùå Canal 3001 n√£o responde (HTTP $http_code_3001)\n";
    $problemas[] = "Canal 3001: N√£o responde";
}

echo "\n";

// ===== 2. TESTAR ENDPOINTS ESPEC√çFICOS =====
echo "2Ô∏è‚É£ TESTANDO ENDPOINTS ESPEC√çFICOS\n";
echo "---------------------------------\n";

$endpoints_teste = [
    '/send/text' => 'Envio de mensagens',
    '/webhook/config' => 'Configura√ß√£o de webhook',
    '/status' => 'Status do servidor',
    '/qr' => 'QR Code',
    '/session/default/status' => 'Status da sess√£o default',
    '/session/comercial/status' => 'Status da sess√£o comercial'
];

foreach ($endpoints_teste as $endpoint => $descricao) {
    echo "üîç Testando $descricao ($endpoint)...\n";
    
    // Testar canal 3000
    $ch = curl_init("http://$vps_ip:3000$endpoint");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 5);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    $status_3000 = ($http_code === 200) ? "‚úÖ" : "‚ùå";
    echo "  Canal 3000: $status_3000 (HTTP $http_code)\n";
    
    // Testar canal 3001
    $ch = curl_init("http://$vps_ip:3001$endpoint");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 5);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    $status_3001 = ($http_code === 200) ? "‚úÖ" : "‚ùå";
    echo "  Canal 3001: $status_3001 (HTTP $http_code)\n";
    
    if ($http_code !== 200) {
        $problemas[] = "Canal 3001: Endpoint $endpoint n√£o funciona (HTTP $http_code)";
    }
    
    echo "\n";
}

// ===== 3. VERIFICAR WEBHOOKS =====
echo "3Ô∏è‚É£ VERIFICANDO WEBHOOKS\n";
echo "-----------------------\n";

// Verificar webhook canal 3000
$ch = curl_init("http://$vps_ip:3000/webhook/config");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 10);
$webhook_3000 = curl_exec($ch);
$webhook_http_3000 = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($webhook_http_3000 === 200) {
    $webhook_config_3000 = json_decode($webhook_3000, true);
    if ($webhook_config_3000 && isset($webhook_config_3000['webhook_url'])) {
        echo "‚úÖ Canal 3000: Webhook configurado\n";
        echo "  üîó URL: {$webhook_config_3000['webhook_url']}\n";
        
        if ($webhook_config_3000['webhook_url'] !== $webhook_principal) {
            $problemas[] = "Canal 3000: Webhook URL incorreta";
        }
    }
} else {
    echo "‚ùå Canal 3000: Webhook n√£o configurado (HTTP $webhook_http_3000)\n";
    $problemas[] = "Canal 3000: Webhook n√£o configurado";
}

// Verificar webhook canal 3001
$ch = curl_init("http://$vps_ip:3001/webhook/config");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 10);
$webhook_3001 = curl_exec($ch);
$webhook_http_3001 = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($webhook_http_3001 === 200) {
    $webhook_config_3001 = json_decode($webhook_3001, true);
    if ($webhook_config_3001 && isset($webhook_config_3001['webhook_url'])) {
        echo "‚úÖ Canal 3001: Webhook configurado\n";
        echo "  üîó URL: {$webhook_config_3001['webhook_url']}\n";
    }
} else {
    echo "‚ùå Canal 3001: Webhook n√£o configurado (HTTP $webhook_http_3001)\n";
    $problemas[] = "Canal 3001: Webhook n√£o configurado";
}

echo "\n";

// ===== 4. APLICAR CORRE√á√ïES =====
echo "4Ô∏è‚É£ APLICANDO CORRE√á√ïES\n";
echo "----------------------\n";

$correcoes_aplicadas = 0;

// Corre√ß√£o 1: Configurar webhook canal 3000 se necess√°rio
if ($webhook_http_3000 !== 200 || 
    ($webhook_config_3000 && $webhook_config_3000['webhook_url'] !== $webhook_principal)) {
    
    echo "üîß Corrigindo webhook canal 3000...\n";
    
    $ch = curl_init("http://$vps_ip:3000/webhook/config");
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(['url' => $webhook_principal]));
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);
    
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    if ($http_code === 200) {
        echo "  ‚úÖ Webhook canal 3000 corrigido\n";
        $correcoes_aplicadas++;
    } else {
        echo "  ‚ùå Erro ao corrigir webhook canal 3000 (HTTP $http_code)\n";
    }
}

// Corre√ß√£o 2: Tentar conectar sess√£o default no canal 3000
echo "üîß Tentando conectar sess√£o default no canal 3000...\n";

$ch = curl_init("http://$vps_ip:3000/session/default/connect");
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 10);

$response = curl_exec($ch);
$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($http_code === 200) {
    echo "  ‚úÖ Sess√£o default conectada\n";
    $correcoes_aplicadas++;
} else {
    echo "  ‚ö†Ô∏è Erro ao conectar sess√£o default (HTTP $http_code)\n";
    echo "  üìù Resposta: $response\n";
}

// Corre√ß√£o 3: Tentar conectar sess√£o comercial no canal 3001
echo "üîß Tentando conectar sess√£o comercial no canal 3001...\n";

$ch = curl_init("http://$vps_ip:3001/session/comercial/connect");
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 10);

$response = curl_exec($ch);
$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($http_code === 200) {
    echo "  ‚úÖ Sess√£o comercial conectada\n";
    $correcoes_aplicadas++;
} else {
    echo "  ‚ö†Ô∏è Erro ao conectar sess√£o comercial (HTTP $http_code)\n";
    echo "  üìù Resposta: $response\n";
}

// Corre√ß√£o 4: Tentar configurar webhook canal 3001 com diferentes endpoints
if ($webhook_http_3001 !== 200) {
    echo "üîß Tentando configurar webhook canal 3001...\n";
    
    $endpoints_webhook = ['/webhook/config', '/webhook', '/hook/config', '/hook', '/set-webhook'];
    $webhook_configurado_3001 = false;
    
    foreach ($endpoints_webhook as $endpoint) {
        $ch = curl_init("http://$vps_ip:3001$endpoint");
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(['url' => $webhook_principal]));
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        
        $response = curl_exec($ch);
        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        if ($http_code === 200) {
            echo "  ‚úÖ Webhook canal 3001 configurado via $endpoint\n";
            $webhook_configurado_3001 = true;
            $correcoes_aplicadas++;
            break;
        }
    }
    
    if (!$webhook_configurado_3001) {
        echo "  ‚ö†Ô∏è N√£o foi poss√≠vel configurar webhook canal 3001\n";
        $problemas[] = "Canal 3001: API n√£o suporta webhook padr√£o";
    }
}

echo "\n";

// ===== 5. TESTAR CORRE√á√ïES =====
echo "5Ô∏è‚É£ TESTANDO CORRE√á√ïES APLICADAS\n";
echo "-------------------------------\n";

// Testar envio canal 3000
echo "üß™ Testando envio canal 3000...\n";
$test_data = [
    'sessionName' => 'default',
    'number' => '5511999999999',
    'message' => 'Teste corre√ß√£o VPS - ' . date('Y-m-d H:i:s')
];

$ch = curl_init("http://$vps_ip:3000/send/text");
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($test_data));
curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 10);

$response = curl_exec($ch);
$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($http_code === 200) {
    echo "  ‚úÖ Envio canal 3000 funcionando\n";
    $result = json_decode($response, true);
    if ($result && isset($result['success']) && $result['success']) {
        echo "  üìù Mensagem enviada com sucesso\n";
    }
} else {
    echo "  ‚ùå Erro no envio canal 3000 (HTTP $http_code)\n";
    echo "  üìù Resposta: $response\n";
    $problemas[] = "Canal 3000: Erro no envio (HTTP $http_code)";
}

// Testar webhook canal 3000
echo "üß™ Testando webhook canal 3000...\n";
$ch = curl_init("http://$vps_ip:3000/webhook/test");
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 10);

$response = curl_exec($ch);
$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($http_code === 200) {
    echo "  ‚úÖ Webhook canal 3000 testado com sucesso\n";
} else {
    echo "  ‚ùå Erro no teste webhook canal 3000 (HTTP $http_code)\n";
    $problemas[] = "Canal 3000: Erro no teste webhook (HTTP $http_code)";
}

echo "\n";

// ===== 6. RELAT√ìRIO FINAL =====
echo "6Ô∏è‚É£ RELAT√ìRIO FINAL DAS CORRE√á√ïES\n";
echo "--------------------------------\n";

echo "üìä RESUMO DOS PROBLEMAS IDENTIFICADOS:\n";
if (empty($problemas)) {
    echo "‚úÖ Nenhum problema identificado!\n";
} else {
    foreach ($problemas as $i => $problema) {
        echo "  " . ($i + 1) . ". $problema\n";
    }
}

echo "\nüìä CORRE√á√ïES APLICADAS: $correcoes_aplicadas\n\n";

// ===== 7. COMANDOS PARA CORRE√á√ïES MANUAIS =====
echo "7Ô∏è‚É£ COMANDOS PARA CORRE√á√ïES MANUAIS\n";
echo "-----------------------------------\n";

echo "üîß Para conectar WhatsApp no canal 3000:\n";
echo "curl http://$vps_ip:3000/qr\n\n";

echo "üîß Para reiniciar servi√ßos na VPS:\n";
echo "ssh root@$vps_ip\n";
echo "pm2 restart whatsapp-3000\n";
echo "pm2 restart whatsapp-3001\n\n";

echo "üîß Para verificar logs:\n";
echo "pm2 logs whatsapp-3000 --lines 20\n";
echo "pm2 logs whatsapp-3001 --lines 20\n\n";

echo "üîß Para migrar canal 3001 para API correta:\n";
echo "# Necess√°rio investigar qual API est√° rodando e migrar para whatsapp-api-server.js\n\n";

// ===== 8. RESUMO FINAL =====
echo "8Ô∏è‚É£ RESUMO FINAL\n";
echo "----------------\n";

echo "üéØ CORRE√á√ïES CONCLU√çDAS!\n\n";

echo "‚úÖ PROBLEMAS CORRIGIDOS:\n";
if ($correcoes_aplicadas > 0) {
    echo "‚Ä¢ Webhook canal 3000 configurado\n";
    echo "‚Ä¢ Sess√µes tentadas conectar\n";
    echo "‚Ä¢ Testes realizados\n";
} else {
    echo "‚Ä¢ Nenhuma corre√ß√£o autom√°tica foi poss√≠vel\n";
}

echo "\n‚ö†Ô∏è PROBLEMAS PENDENTES:\n";
if (!empty($problemas)) {
    foreach (array_slice($problemas, 0, 3) as $problema) {
        echo "‚Ä¢ $problema\n";
    }
} else {
    echo "‚Ä¢ Nenhum problema identificado\n";
}

echo "\nüìö PR√ìXIMOS PASSOS:\n";
echo "1. Conectar WhatsApp no canal 3000 (gerar QR Code)\n";
echo "2. Investigar API do canal 3001 para migra√ß√£o\n";
echo "3. Testar funcionalidades completas\n";
echo "4. Monitorar logs se necess√°rio\n\n";

echo "üìû COMANDOS √öTEIS:\n";
echo "‚Ä¢ Status: curl http://$vps_ip:3000/status\n";
echo "‚Ä¢ QR Code: curl http://$vps_ip:3000/qr\n";
echo "‚Ä¢ Webhook: curl http://$vps_ip:3000/webhook/config\n";
echo "‚Ä¢ Logs: ssh root@$vps_ip 'pm2 logs --lines 20'\n\n";

echo "‚úÖ CORRE√á√ïES FINALIZADAS!\n";
echo "üéâ Problemas identificados e corre√ß√µes aplicadas!\n";
?> 