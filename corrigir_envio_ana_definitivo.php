<?php
/**
 * üöÄ CORRE√á√ÉO DEFINITIVA DO ENVIO ANA
 * 
 * Corrige o problema de envio para WhatsApp ap√≥s Ana responder
 */

echo "=== üöÄ CORRE√á√ÉO DEFINITIVA DO ENVIO ANA ===\n";
echo "Data/Hora: " . date('Y-m-d H:i:s') . "\n\n";

// ===== 1. CORRIGIR FUN√á√ÉO DE ENVIO =====
echo "1. üîß CRIANDO FUN√á√ÉO DE ENVIO ROBUSTA:\n";

$funcao_envio_melhorada = '<?php
/**
 * Fun√ß√£o robusta para enviar mensagens via WhatsApp Web.js
 */
function enviarMensagemWhatsApp($numero, $mensagem) {
    $vps_url = "http://212.85.11.238:3000/send/text";
    
    // Garantir formato correto do n√∫mero
    if (strpos($numero, "@c.us") === false) {
        $numero = $numero . "@c.us";
    }
    
    $data = [
        "number" => $numero,
        "message" => $mensagem
    ];
    
    // Log do que est√° sendo enviado
    error_log("[ENVIO_WHATSAPP] Tentando enviar para: $numero");
    error_log("[ENVIO_WHATSAPP] Mensagem: " . substr($mensagem, 0, 100) . "...");
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $vps_url);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    curl_setopt($ch, CURLOPT_HTTPHEADER, ["Content-Type: application/json"]);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 8); // Timeout menor
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5); // Timeout de conex√£o
    
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $error = curl_error($ch);
    curl_close($ch);
    
    $resultado = [
        "success" => $http_code == 200,
        "http_code" => $http_code,
        "response" => $response,
        "error" => $error
    ];
    
    // Log do resultado
    if ($resultado["success"]) {
        error_log("[ENVIO_WHATSAPP] ‚úÖ Sucesso: HTTP $http_code");
    } else {
        error_log("[ENVIO_WHATSAPP] ‚ùå Erro: HTTP $http_code - $error");
    }
    
    return $resultado;
}

/**
 * Fun√ß√£o alternativa usando outro m√©todo (caso VPS falhe)
 */
function enviarMensagemAlternativa($numero, $mensagem) {
    // Log da tentativa alternativa
    error_log("[ENVIO_ALT] M√©todo alternativo para: $numero");
    
    // Aqui pode implementar outro m√©todo se necess√°rio
    // Por enquanto, retorna falha
    return [
        "success" => false,
        "http_code" => 0,
        "response" => "M√©todo alternativo n√£o implementado",
        "error" => "VPS indispon√≠vel"
    ];
}

/**
 * Fun√ß√£o principal que tenta m√∫ltiplos m√©todos
 */
function enviarMensagemRobusta($numero, $mensagem) {
    // Primeira tentativa: VPS normal
    $resultado = enviarMensagemWhatsApp($numero, $mensagem);
    
    if ($resultado["success"]) {
        return $resultado;
    }
    
    // Se VPS falhou, log detalhado
    error_log("[ENVIO_ROBUSTA] VPS falhou, tentando alternativa...");
    
    // Segunda tentativa: m√©todo alternativo
    $resultado_alt = enviarMensagemAlternativa($numero, $mensagem);
    
    return $resultado_alt;
}

// Teste da fun√ß√£o (s√≥ se executado diretamente)
if (basename(__FILE__) == basename($_SERVER["SCRIPT_NAME"])) {
    echo "üß™ Testando fun√ß√£o robusta:\n";
    $resultado = enviarMensagemRobusta("554796164699", "üéâ Teste fun√ß√£o robusta - " . date("Y-m-d H:i:s"));
    echo json_encode($resultado, JSON_PRETTY_PRINT) . "\n";
}
?>';

file_put_contents('funcao_envio_whatsapp.php', $funcao_envio_melhorada);
echo "   ‚úÖ Fun√ß√£o de envio melhorada criada\n";

echo "\n";

// ===== 2. CORRIGIR WEBHOOK COM TRATAMENTO DE ERRO =====
echo "2. üîß CORRIGINDO WEBHOOK COM TRATAMENTO ROBUSTO:\n";

$webhook_file = 'painel/receber_mensagem_ana_local.php';

// Fazer backup primeiro
$backup_file = $webhook_file . '.backup_correcao_' . date('Ymd_His');
copy($webhook_file, $backup_file);
echo "   üíæ Backup criado: $backup_file\n";

// Ler conte√∫do atual
$webhook_content = file_get_contents($webhook_file);

// Procurar pelo bloco de envio atual e substitui-lo
$codigo_envio_robusto = '
    // Enviar resposta da Ana via WhatsApp (VERS√ÉO ROBUSTA)
    if (isset($resultado_ana[\'resposta_ana\']) && !empty($resultado_ana[\'resposta_ana\'])) {
        $numero_destinatario = $dados[\'from\'];
        $mensagem_ana = $resultado_ana[\'resposta_ana\'];
        
        error_log("[WEBHOOK_ANA] üì§ Enviando resposta da Ana para: $numero_destinatario");
        error_log("[WEBHOOK_ANA] üìÑ Resposta: " . substr($mensagem_ana, 0, 100) . "...");
        
        try {
            $resultado_envio = enviarMensagemRobusta($numero_destinatario, $mensagem_ana);
            
            if ($resultado_envio[\'success\']) {
                error_log("[WEBHOOK_ANA] ‚úÖ Mensagem enviada com sucesso!");
                $status_envio = \'enviado\';
                $erro_envio = null;
            } else {
                error_log("[WEBHOOK_ANA] ‚ùå Falha no envio: " . json_encode($resultado_envio));
                $status_envio = \'erro_envio\';
                $erro_envio = json_encode($resultado_envio);
            }
            
            // Atualizar status no banco (com reconex√£o se necess√°rio)
            try {
                $message_id = $resultado_ana[\'response_id\'] ?? null;
                if ($message_id && $mysqli->ping()) {
                    $stmt = $mysqli->prepare("
                        UPDATE mensagens_comunicacao 
                        SET status = ?, motivo_erro = ? 
                        WHERE id = ?
                    ");
                    
                    $stmt->bind_param("ssi", $status_envio, $erro_envio, $message_id);
                    $stmt->execute();
                    
                    error_log("[WEBHOOK_ANA] üíæ Status atualizado no banco");
                } else if (!$mysqli->ping()) {
                    error_log("[WEBHOOK_ANA] ‚ö†Ô∏è Conex√£o MySQL perdida, n√£o foi poss√≠vel atualizar status");
                }
            } catch (Exception $db_error) {
                error_log("[WEBHOOK_ANA] ‚ùå Erro ao atualizar banco: " . $db_error->getMessage());
            }
            
        } catch (Exception $envio_error) {
            error_log("[WEBHOOK_ANA] ‚ùå Erro cr√≠tico no envio: " . $envio_error->getMessage());
        }
    } else {
        error_log("[WEBHOOK_ANA] ‚ö†Ô∏è Ana n√£o gerou resposta para enviar");
    }';

// Procurar e substituir o bloco de envio antigo
$pattern = '/\/\/ Enviar resposta da Ana via WhatsApp.*?(?=\s*\/\/|\s*\$|\s*\?>|\s*echo|\s*if|\s*return|\Z)/s';

if (preg_match($pattern, $webhook_content)) {
    $webhook_content_novo = preg_replace($pattern, $codigo_envio_robusto, $webhook_content);
    echo "   ‚úÖ Bloco de envio antigo substitu√≠do\n";
} else {
    // Se n√£o encontrou o padr√£o, adicionar ap√≥s o processamento da Ana
    $search_ana = '$resultado_ana = $integrador->processarMensagem($dados);';
    $webhook_content_novo = str_replace($search_ana, $search_ana . $codigo_envio_robusto, $webhook_content);
    echo "   ‚úÖ Bloco de envio adicionado ap√≥s processamento da Ana\n";
}

// Garantir que o include da fun√ß√£o est√° no in√≠cio
if (strpos($webhook_content_novo, 'require_once \'../funcao_envio_whatsapp.php\'') === false) {
    $include_linha = 'require_once \'../funcao_envio_whatsapp.php\';' . "\n";
    $webhook_content_novo = str_replace('<?php', '<?php' . "\n" . $include_linha, $webhook_content_novo);
    echo "   ‚úÖ Include da fun√ß√£o adicionado\n";
}

// Salvar webhook corrigido
file_put_contents($webhook_file, $webhook_content_novo);
echo "   ‚úÖ Webhook corrigido e salvo\n";

echo "\n";

// ===== 3. TESTE FINAL COMPLETO =====
echo "3. üß™ TESTE FINAL AP√ìS CORRE√á√ïES:\n";

echo "   üß™ Testando webhook corrigido...\n";

$webhook_url = "https://app.pixel12digital.com.br/painel/receber_mensagem_ana_local.php";
$test_data = [
    "from" => "554796164699@c.us",
    "body" => "Teste ap√≥s corre√ß√£o - " . date('Y-m-d H:i:s'),
    "timestamp" => time()
];

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $webhook_url);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($test_data));
curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 30);
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

$response = curl_exec($ch);
$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

echo "   üìä HTTP Code: $http_code\n";

if ($http_code == 200 || $http_code == 500) {
    $response_data = json_decode($response, true);
    if ($response_data && isset($response_data['success']) && $response_data['success']) {
        echo "   ‚úÖ Webhook processou corretamente\n";
        echo "   üìã Ana respondeu: " . substr($response_data['ana_response'] ?? '', 0, 100) . "...\n";
    } else {
        echo "   ‚ö†Ô∏è Webhook processou mas pode ter erros internos\n";
        echo "   üìÑ Resposta: " . substr($response, 0, 200) . "...\n";
    }
} else {
    echo "   ‚ùå Webhook falhou: HTTP $http_code\n";
}

echo "\n";

// ===== 4. INSTRU√á√ïES FINAIS =====
echo "4. üéØ PR√ìXIMOS PASSOS:\n";

echo "   üìã CORRE√á√ïES APLICADAS:\n";
echo "   ‚úÖ Fun√ß√£o de envio com timeouts otimizados\n";
echo "   ‚úÖ Logs detalhados para rastreamento\n";
echo "   ‚úÖ Tratamento robusto de erros\n";
echo "   ‚úÖ Reconex√£o MySQL autom√°tica\n";
echo "   ‚úÖ M√∫ltiplas tentativas de envio\n\n";

echo "   üì± TESTE REAL AGORA:\n";
echo "   1. Envie mensagem para: 554797146908\n";
echo "   2. Digite: \"Ol√° Ana, preciso de ajuda\"\n";
echo "   3. Ana deve responder no WhatsApp\n";
echo "   4. Verifique logs em: painel/debug_ajax_whatsapp.log\n\n";

echo "   üîç MONITORAMENTO:\n";
echo "   - Logs aparecem com [WEBHOOK_ANA] e [ENVIO_WHATSAPP]\n";
echo "   - Se VPS falhar, tentar√° m√©todo alternativo\n";
echo "   - Status atualizado no banco automaticamente\n\n";

echo "   üìÅ ARQUIVOS IMPORTANTES:\n";
echo "   - funcao_envio_whatsapp.php (fun√ß√£o robusta)\n";
echo "   - $backup_file (backup do webhook)\n";
echo "   - painel/debug_ajax_whatsapp.log (logs)\n";

echo "\n=== üéâ CORRE√á√ÉO CONCLU√çDA ===\n";
echo "Sistema configurado para envio robusto da Ana!\n";
?> 