<?php
/**
 * Webhook Sem Redirecionamento
 * Endpoint webhook em diret√≥rio separado para evitar redirecionamentos
 */

// Desabilitar redirecionamentos e cache
ini_set('max_execution_time', 30);
ini_set('memory_limit', '256M');

// Cabe√ßalhos espec√≠ficos para evitar redirecionamentos
header('Cache-Control: no-cache, no-store, must-revalidate, max-age=0');
header('Pragma: no-cache');
header('Expires: 0');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, GET, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');
header('Content-Type: application/json');

// Responder imediatamente para requisi√ß√µes OPTIONS
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    echo json_encode(['status' => 'ok', 'method' => 'options']);
    exit;
}

require_once __DIR__ . '/../config.php';
require_once '../painel/db.php';

// Detectar ambiente
$ambiente = $is_local ? 'LOCAL' : 'PRODU√á√ÉO';

// Log da requisi√ß√£o
$input = file_get_contents('php://input');
$data = json_decode($input, true);

// Salvar log
$log_file = '../logs/webhook_sem_redirect_' . date('Y-m-d') . '.log';
$log_data = date('Y-m-d H:i:s') . " [{$ambiente}] - " . $input . "\n";
file_put_contents($log_file, $log_data, FILE_APPEND);

// Log de debug
if (DEBUG_MODE) {
    error_log("[WEBHOOK SEM REDIRECT {$ambiente}] Requisi√ß√£o recebida");
    error_log("[WEBHOOK SEM REDIRECT {$ambiente}] Dados: " . $input);
}

// Verificar se √© uma mensagem recebida
if (isset($data['event']) && $data['event'] === 'onmessage') {
    $message = $data['data'];
    
    // Extrair informa√ß√µes
    $numero = $message['from'];
    $texto = $message['text'] ?? '';
    $tipo = $message['type'] ?? 'text';
    $data_hora = date('Y-m-d H:i:s');
    
    if (DEBUG_MODE) {
        error_log("[WEBHOOK SEM REDIRECT {$ambiente}] Processando mensagem de: $numero");
    }
    
    // Buscar cliente pelo n√∫mero
    $numero_limpo = preg_replace('/\D/', '', $numero);
    $sql = "SELECT id, nome FROM clientes WHERE celular LIKE '%$numero_limpo%' LIMIT 1";
    $result = $mysqli->query($sql);
    
    $cliente_id = null;
    if ($result && $result->num_rows > 0) {
        $cliente = $result->fetch_assoc();
        $cliente_id = $cliente['id'];
        if (DEBUG_MODE) {
            error_log("[WEBHOOK SEM REDIRECT {$ambiente}] Cliente encontrado: {$cliente['nome']} (ID: $cliente_id)");
        }
    }
    
    // Cadastro autom√°tico de clientes n√£o cadastrados
    if (!$cliente_id) {
        if (DEBUG_MODE) {
            error_log("[WEBHOOK SEM REDIRECT {$ambiente}] Cliente n√£o encontrado, criando cadastro autom√°tico...");
        }
        
        // Formatar n√∫mero para salvar
        $numero_para_salvar = $numero;
        if (strpos($numero, "55") === 0) {
            $numero_para_salvar = substr($numero, 2);
        }
        
        // Criar cliente automaticamente
        $nome_cliente = "Cliente WhatsApp (" . $numero_para_salvar . ")";
        $data_criacao = date("Y-m-d H:i:s");
        
        $sql_criar = "INSERT INTO clientes (nome, celular, data_criacao, data_atualizacao) 
                      VALUES (\"" . $mysqli->real_escape_string($nome_cliente) . "\", 
                              \"" . $mysqli->real_escape_string($numero_para_salvar) . "\", 
                              \"$data_criacao\", \"$data_criacao\")";
        
        if ($mysqli->query($sql_criar)) {
            $cliente_id = $mysqli->insert_id;
            if (DEBUG_MODE) {
                error_log("[WEBHOOK SEM REDIRECT {$ambiente}] ‚úÖ Cliente criado automaticamente - ID: $cliente_id");
            }
        } else {
            error_log("[WEBHOOK SEM REDIRECT {$ambiente}] ‚ùå Erro ao criar cliente: " . $mysqli->error);
        }
    }

    // Identificar canal baseado na sess√£o
    $canal_id = 36; // Padr√£o: Financeiro (3000)
    $canal_nome = 'Financeiro';
    
    // Verificar se h√° informa√ß√£o da sess√£o para identificar o canal
    $session_name = $message['session'] ?? 'default';
    
    if ($session_name === 'comercial') {
        // Canal Comercial (3001)
        $canal_id = 37;
        $canal_nome = 'Comercial - Pixel';
    } else {
        // Canal Financeiro (3000) - padr√£o
        $canal_id = 36;
        $canal_nome = 'Financeiro';
    }
    
    if (DEBUG_MODE) {
        error_log("[WEBHOOK SEM REDIRECT {$ambiente}] Canal identificado: $canal_nome (ID: $canal_id) - Sess√£o: $session_name");
    }
    
    // Salvar mensagem recebida
    $texto_escaped = $mysqli->real_escape_string($texto);
    $tipo_escaped = $mysqli->real_escape_string($tipo);
    
    $sql = "INSERT INTO mensagens_comunicacao (canal_id, cliente_id, numero_whatsapp, mensagem, tipo, data_hora, direcao, status) 
            VALUES ($canal_id, " . ($cliente_id ? $cliente_id : 'NULL') . ", '$numero', '$texto_escaped', '$tipo_escaped', '$data_hora', 'recebido', 'recebido')";
    
    if ($mysqli->query($sql)) {
        $mensagem_id = $mysqli->insert_id;
        if (DEBUG_MODE) {
            error_log("[WEBHOOK SEM REDIRECT {$ambiente}] ‚úÖ Mensagem salva - ID: $mensagem_id");
        }
        
        // Invalidar cache se dispon√≠vel
        if (file_exists('../painel/cache_invalidator.php')) {
            require_once '../painel/cache_invalidator.php';
            if ($cliente_id && function_exists('invalidate_message_cache')) {
                invalidate_message_cache($cliente_id);
            }
        }
    } else {
        error_log("[WEBHOOK SEM REDIRECT {$ambiente}] ‚ùå Erro ao salvar mensagem: " . $mysqli->error);
    }
    
    // Resposta autom√°tica simples
    if ($texto) {
        // üöÄ INTEGRA√á√ÉO COM ANA - Canal 3000
        $canal_ana = $mysqli->query("SELECT porta FROM canais_comunicacao WHERE id = $canal_id")->fetch_assoc();
        
        if ($canal_ana && intval($canal_ana['porta']) === 3000) {
            // CANAL 3000 - USAR ANA
            error_log("[WEBHOOK_REDIRECT_ANA] Canal 3000 detectado - Chamando Ana");
            
            try {
                $api_url = 'https://agentes.pixel12digital.com.br/api/chat/agent_chat.php';
                $payload = [
                    'question' => $texto,
                    'agent_id' => '3' // ID da Ana
                ];
                
                $ch = curl_init($api_url);
                curl_setopt($ch, CURLOPT_POST, true);
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));
                curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_TIMEOUT, 30);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                
                $response_ana = curl_exec($ch);
                $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                $curl_error = curl_error($ch);
                curl_close($ch);
                
                if (!$curl_error && $http_code === 200) {
                    $data_ana = json_decode($response_ana, true);
                    
                    if ($data_ana && isset($data_ana['response'])) {
                        $resposta_ana = $data_ana['response'];
                        error_log("[WEBHOOK_REDIRECT_ANA] ‚úÖ Ana API respondeu com sucesso");
                        
                        // üîç DETECTAR SE PRECISA CONSULTAR FATURAS
                        $precisa_consultar_faturas = false;
                        $resposta_lower = strtolower($resposta_ana);
                        $mensagem_lower = strtolower($texto);
                        
                        // Detectar palavras-chave relacionadas a faturas
                        $palavras_financeiras = ['fatura', 'pagamento', 'conta', 'cobran√ßa', 'vencimento', 'd√©bito', 'boleto', 'financeiro'];
                        
                        foreach ($palavras_financeiras as $palavra) {
                            if (strpos($resposta_lower, $palavra) !== false || strpos($mensagem_lower, $palavra) !== false) {
                                $precisa_consultar_faturas = true;
                                break;
                            }
                        }
                        
                        // üí∞ CONSULTAR FATURAS SE NECESS√ÅRIO
                        if ($precisa_consultar_faturas && $cliente_id) {
                            error_log("[WEBHOOK_REDIRECT_ANA] üìä Consultando faturas do cliente: $cliente_id");
                            
                            // Buscar faturas vencidas
                            $sql_vencidas = "SELECT 
                                                id, valor, status,
                                                DATE_FORMAT(vencimento, '%d/%m/%Y') as vencimento_formatado,
                                                url_fatura,
                                                DATEDIFF(CURDATE(), vencimento) as dias_vencido
                                            FROM cobrancas 
                                            WHERE cliente_id = $cliente_id 
                                            AND status = 'OVERDUE'
                                            ORDER BY vencimento ASC";
                            
                            $result_vencidas = $mysqli->query($sql_vencidas);
                            
                            // Buscar pr√≥xima fatura a vencer
                            $sql_proxima = "SELECT 
                                                id, valor, status,
                                                DATE_FORMAT(vencimento, '%d/%m/%Y') as vencimento_formatado,
                                                url_fatura,
                                                DATEDIFF(vencimento, CURDATE()) as dias_para_vencer
                                            FROM cobrancas 
                                            WHERE cliente_id = $cliente_id 
                                            AND status = 'PENDING'
                                            ORDER BY vencimento ASC 
                                            LIMIT 1";
                            
                            $result_proxima = $mysqli->query($sql_proxima);
                            
                            // Montar informa√ß√µes financeiras
                            $info_financeira = "\n\nüìä **RESUMO DA SUA CONTA:**\n";
                            $tem_faturas = false;
                            
                            // Faturas vencidas
                            if ($result_vencidas && $result_vencidas->num_rows > 0) {
                                $tem_faturas = true;
                                $total_vencidas = $result_vencidas->num_rows;
                                $valor_total_vencido = 0;
                                
                                $faturas_vencidas = [];
                                while ($row = $result_vencidas->fetch_assoc()) {
                                    $faturas_vencidas[] = $row;
                                    $valor_total_vencido += floatval($row['valor']);
                                }
                                
                                $info_financeira .= "‚ö†Ô∏è **FATURAS VENCIDAS:** $total_vencidas\n";
                                $info_financeira .= "üí∞ **Total em atraso:** R$ " . number_format($valor_total_vencido, 2, ',', '.') . "\n";
                                
                                // Mostrar primeira fatura vencida
                                if (count($faturas_vencidas) > 0) {
                                    $primeira = $faturas_vencidas[0];
                                    $info_financeira .= "üìÖ **Mais antiga:** {$primeira['vencimento_formatado']} ({$primeira['dias_vencido']} dias atr√°s)\n";
                                    
                                    if (!empty($primeira['url_fatura'])) {
                                        $info_financeira .= "üîó **Link pagamento:** {$primeira['url_fatura']}\n";
                                    }
                                }
                                
                                // Se tem muitas faturas, mostrar resumo
                                if ($total_vencidas > 1) {
                                    $info_financeira .= "üìã *+".($total_vencidas-1)." outras faturas vencidas*\n";
                                }
                                
                                $info_financeira .= "\n";
                            }
                            
                            // Pr√≥xima fatura a vencer
                            if ($result_proxima && $result_proxima->num_rows > 0) {
                                $tem_faturas = true;
                                $proxima = $result_proxima->fetch_assoc();
                                
                                $info_financeira .= "üìÖ **PR√ìXIMA FATURA:**\n";
                                $info_financeira .= "üí≥ Vencimento: {$proxima['vencimento_formatado']}\n";
                                $info_financeira .= "üí∞ Valor: R$ " . number_format($proxima['valor'], 2, ',', '.') . "\n";
                                
                                if ($proxima['dias_para_vencer'] <= 3) {
                                    $info_financeira .= "‚ö° *Vence em {$proxima['dias_para_vencer']} dias!*\n";
                                }
                                
                                if (!empty($proxima['url_fatura'])) {
                                    $info_financeira .= "üîó **Link:** {$proxima['url_fatura']}\n";
                                }
                            }
                            
                            // Se n√£o tem faturas
                            if (!$tem_faturas) {
                                $info_financeira .= "‚úÖ **Parab√©ns!** Sua conta est√° em dia!\n";
                                $info_financeira .= "üìã Nenhuma fatura pendente ou vencida.\n";
                            }
                            
                            // Adicionar informa√ß√µes √† resposta da Ana
                            $resposta_ana .= $info_financeira;
                            
                            error_log("[WEBHOOK_REDIRECT_ANA] üí∞ Resposta enriquecida com dados financeiros");
                        }
                        
                        // Salvar resposta da Ana no banco
                        $sql_resposta = "INSERT INTO mensagens_comunicacao 
                                         (canal_id, cliente_id, mensagem, tipo, data_hora, direcao, status) 
                                         VALUES ($canal_id, " . ($cliente_id ? $cliente_id : 'NULL') . ", '" . $mysqli->real_escape_string($resposta_ana) . "', 'texto', '$data_hora', 'enviado', 'entregue')";
                        
                        if ($mysqli->query($sql_resposta)) {
                            $resposta_id = $mysqli->insert_id;
                            error_log("[WEBHOOK_REDIRECT_ANA] ‚úÖ Resposta Ana salva - ID: $resposta_id");
                            
                            // Enviar resposta da Ana para WhatsApp
                            $api_url_whats = WHATSAPP_ROBOT_URL . "/send/text";
                            $data_envio = [
                                "number" => $numero,
                                "message" => $resposta_ana
                            ];
                            
                            $ch_whats = curl_init($api_url_whats);
                            curl_setopt($ch_whats, CURLOPT_POST, true);
                            curl_setopt($ch_whats, CURLOPT_POSTFIELDS, json_encode($data_envio));
                            curl_setopt($ch_whats, CURLOPT_HTTPHEADER, ["Content-Type: application/json"]);
                            curl_setopt($ch_whats, CURLOPT_RETURNTRANSFER, true);
                            curl_setopt($ch_whats, CURLOPT_TIMEOUT, 10);
                            
                            $response_whats = curl_exec($ch_whats);
                            $curl_error_whats = curl_error($ch_whats);
                            $http_code_whats = curl_getinfo($ch_whats, CURLINFO_HTTP_CODE);
                            curl_close($ch_whats);
                            
                            if ($curl_error_whats) {
                                error_log("[WEBHOOK_REDIRECT_ANA] ‚ùå Erro ao enviar via WhatsApp: $curl_error_whats");
                            } else {
                                error_log("[WEBHOOK_REDIRECT_ANA] ‚úÖ Resposta Ana enviada via WhatsApp - HTTP: $http_code_whats");
                            }
                        } else {
                            error_log("[WEBHOOK_REDIRECT_ANA] ‚ùå Erro ao salvar resposta Ana: " . $mysqli->error);
                        }
                        
                        // Ana processou via API, resposta enviada
                        echo json_encode([
                            'success' => true, 
                            'message' => 'Processado via Ana API',
                            'source' => 'webhook_ana_api',
                            'ana_response' => $resposta_ana
                        ]);
                        exit;
                        
                    } else {
                        error_log("[WEBHOOK_REDIRECT_ANA] ‚ùå Resposta inv√°lida da API Ana");
                    }
                } else {
                    error_log("[WEBHOOK_REDIRECT_ANA] ‚ùå Erro na API Ana - HTTP: $http_code, cURL: $curl_error");
                }
                
            } catch (Exception $e) {
                error_log("[WEBHOOK_REDIRECT_ANA] ‚ùå Erro ao chamar API Ana: " . $e->getMessage());
            }
        }
        
        // OUTROS CANAIS OU FALLBACK - USAR RESPOSTA AUTOM√ÅTICA ORIGINAL
        $resposta = "Ol√°! Sua mensagem foi recebida. Em breve entraremos em contato.";
        
        // Usar URL do WhatsApp configurada
        $api_url = WHATSAPP_ROBOT_URL . "/send/text";
        $data_envio = [
            "number" => $numero,
            "message" => $resposta
        ];
        
        if (DEBUG_MODE) {
            error_log("[WEBHOOK SEM REDIRECT {$ambiente}] Enviando resposta via: $api_url");
        }
        
        $ch = curl_init($api_url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data_envio));
        curl_setopt($ch, CURLOPT_HTTPHEADER, ["Content-Type: application/json"]);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        
        $response = curl_exec($ch);
        $curl_error = curl_error($ch);
        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        if ($curl_error) {
            error_log("[WEBHOOK SEM REDIRECT {$ambiente}] ‚ùå Erro cURL: $curl_error");
        } else {
            if (DEBUG_MODE) {
                error_log("[WEBHOOK SEM REDIRECT {$ambiente}] ‚úÖ Resposta enviada - HTTP: $http_code - Response: $response");
            }
        }
    }
}

// Responder OK
$response = [
    'status' => 'ok',
    'ambiente' => $ambiente,
    'timestamp' => date('Y-m-d H:i:s'),
    'webhook_type' => 'sem_redirect',
    'message' => 'Webhook sem redirecionamento processado com sucesso'
];

http_response_code(200);
echo json_encode($response);
?> 