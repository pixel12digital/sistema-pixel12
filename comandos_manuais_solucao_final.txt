# 🚀 COMANDOS MANUAIS - SOLUÇÃO COMPLETA FINAL
# Executar na VPS: ssh root@212.85.11.238

# 1. Navegar para o diretório
cd /var/whatsapp-api

# 2. Parar e remover instâncias problemáticas
pm2 stop whatsapp-3000 whatsapp-3001
pm2 delete whatsapp-3000 whatsapp-3001

# 3. Instalar Puppeteer completo
npm install puppeteer --save

# 4. Instalar Chromium-browser como fallback
apt update && apt install -y chromium-browser

# 5. Criar ecosystem.config.js
cat > ecosystem.config.js << 'EOF'
module.exports = {
  apps: [
    {
      name: 'whatsapp-3000',
      script: 'whatsapp-api-server.js',
      exec_mode: 'fork',         // <<< aqui - força fork em vez de cluster
      instances: 1,              // Garantir apenas 1 instância
      env: { 
        PORT: 3000,
        NODE_ENV: 'production'
      },
      error_file: './logs/whatsapp-3000-error.log',
      out_file: './logs/whatsapp-3000-out.log',
      log_file: './logs/whatsapp-3000-combined.log',
      time: true,
      max_memory_restart: '500M',
      restart_delay: 4000,
      max_restarts: 10
    },
    {
      name: 'whatsapp-3001',
      script: 'whatsapp-api-server.js',
      exec_mode: 'fork',         // <<< e aqui - força fork em vez de cluster
      instances: 1,              // Garantir apenas 1 instância
      env: { 
        PORT: 3001,
        NODE_ENV: 'production'
      },
      error_file: './logs/whatsapp-3001-error.log',
      out_file: './logs/whatsapp-3001-out.log',
      log_file: './logs/whatsapp-3001-combined.log',
      time: true,
      max_memory_restart: '500M',
      restart_delay: 4000,
      max_restarts: 10
    }
  ]
};
EOF

# 6. Configurar executablePath no arquivo (se necessário)
# Verificar se já tem executablePath configurado
grep -q "executablePath" whatsapp-api-server.js || sed -i '/puppeteer: {/a\        executablePath: "/usr/bin/chromium-browser",' whatsapp-api-server.js

# 7. Criar diretório de logs
mkdir -p logs

# 8. Iniciar com configuração correta
pm2 start ecosystem.config.js

# 9. Verificar status
pm2 list

# 10. Salvar configuração
pm2 save

# 11. Aguardar inicialização
sleep 20

# 12. Testar endpoints
curl http://127.0.0.1:3000/status
curl http://127.0.0.1:3001/status
curl http://127.0.0.1:3000/qr?session=default
curl http://127.0.0.1:3001/qr?session=comercial

# 13. Verificar logs
pm2 logs whatsapp-3000 --lines 15 --nostream
pm2 logs whatsapp-3001 --lines 15 --nostream

# 14. Verificar se não há mais EADDRINUSE
pm2 logs whatsapp-3000 --nostream | grep -q "EADDRINUSE" && echo "ERRO: Ainda há EADDRINUSE" || echo "SUCESSO: Sem EADDRINUSE"

# 15. Verificar se não há mais problemas com Chromium
pm2 logs whatsapp-3000 --nostream | grep -q "Could not find expected browser" && echo "ERRO: Ainda há problema com Chromium" || echo "SUCESSO: Sem problemas com Chromium"

# RESULTADO ESPERADO:
# - Ambos os processos devem estar "online" no pm2 list
# - /status deve retornar JSON sem erros
# - /qr deve retornar QR Code ou status "qr_ready"
# - Logs sem EADDRINUSE e sem problemas de Chromium 